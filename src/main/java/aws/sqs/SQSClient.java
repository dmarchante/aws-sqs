/*
 * This Java source file was generated by the Gradle 'init' task.
 */


/*
 * Copyright 2010-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  https://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 *
 */

package aws.sqs;

import com.amazonaws.AmazonClientException;
import com.amazonaws.AmazonServiceException;
import com.amazonaws.services.sqs.AmazonSQS;
import com.amazonaws.services.sqs.AmazonSQSClientBuilder;
import com.amazonaws.services.sqs.model.*;

import java.util.List;
import java.util.Map.Entry;

public class SQSClient {
    public static void main(String[] args) {
        /*
         * Create a new instance of the builder with all defaults (credentials
         * and region) set automatically. For more information, see
         * Creating Service Clients in the AWS SDK for Java Developer Guide.
         */
        final AmazonSQS sqs = AmazonSQSClientBuilder.defaultClient();

        try {
            final String queueAUrl = sqs.getQueueUrl("cdmarch-queue-a").getQueueUrl();
            final String queueBUrl = sqs.getQueueUrl("cdmarch-queue-b").getQueueUrl();
            final String queueCUrl = sqs.getQueueUrl("cdmarch-queue-c").getQueueUrl();

            // List all queues.
            System.out.println("Listing all queues in your account.\n");
            for (final String queueUrl : sqs.listQueues().getQueueUrls()) {
                System.out.println("  QueueUrl: " + queueUrl);
            }
            System.out.println();

            // Send messages.
            /*
                Queue A
             */
            System.out.println("Sending a message to Queue A.\n");
            sqs.sendMessage(new SendMessageRequest(queueAUrl,
                    "This is my message text for Queue A."));

            /*
                Queue B
             */
            System.out.println("Sending a message to Queue B.\n");
            sqs.sendMessage(new SendMessageRequest(queueBUrl,
                    "This is my message text for Queue B."));

            /*
                Queue C
             */
            System.out.println("Sending a message to Queue C.\n");
            sqs.sendMessage(new SendMessageRequest(queueCUrl,
                    "This is my message text for Queue C."));

            // Receive messages.
            /*
                Queue A
             */
            System.out.println("Receiving messages from Queue A.\n");
            final ReceiveMessageRequest receiveQueueAMessageRequest =
                    new ReceiveMessageRequest(queueAUrl);
            final List<Message> queueAMessages = sqs.receiveMessage(receiveQueueAMessageRequest)
                    .getMessages();
            for (final Message message : queueAMessages) {
                System.out.println("Message");
                System.out.println("  MessageId:     "
                        + message.getMessageId());
                System.out.println("  ReceiptHandle: "
                        + message.getReceiptHandle());
                System.out.println("  MD5OfBody:     "
                        + message.getMD5OfBody());
                System.out.println("  Body:          "
                        + message.getBody());
                for (final Entry<String, String> entry : message.getAttributes()
                        .entrySet()) {
                    System.out.println("Attribute");
                    System.out.println("  Name:  " + entry
                            .getKey());
                    System.out.println("  Value: " + entry
                            .getValue());
                }
            }
            System.out.println();

            /*
                Queue B
             */
            System.out.println("Receiving messages from Queue B.\n");
            final ReceiveMessageRequest receiveQueueBMessageRequest =
                    new ReceiveMessageRequest(queueBUrl);
            final List<Message> queueBMessages = sqs.receiveMessage(receiveQueueBMessageRequest)
                    .getMessages();
            for (final Message message : queueBMessages) {
                System.out.println("Message");
                System.out.println("  MessageId:     "
                        + message.getMessageId());
                System.out.println("  ReceiptHandle: "
                        + message.getReceiptHandle());
                System.out.println("  MD5OfBody:     "
                        + message.getMD5OfBody());
                System.out.println("  Body:          "
                        + message.getBody());
                for (final Entry<String, String> entry : message.getAttributes()
                        .entrySet()) {
                    System.out.println("Attribute");
                    System.out.println("  Name:  " + entry
                            .getKey());
                    System.out.println("  Value: " + entry
                            .getValue());
                }
            }
            System.out.println();

            /*
                Queue C
             */
            System.out.println("Receiving messages from Queue C.\n");
            final ReceiveMessageRequest receiveQueueCMessageRequest =
                    new ReceiveMessageRequest(queueCUrl);
            final List<Message> queueCMessages = sqs.receiveMessage(receiveQueueCMessageRequest)
                    .getMessages();
            for (final Message message : queueCMessages) {
                System.out.println("Message");
                System.out.println("  MessageId:     "
                        + message.getMessageId());
                System.out.println("  ReceiptHandle: "
                        + message.getReceiptHandle());
                System.out.println("  MD5OfBody:     "
                        + message.getMD5OfBody());
                System.out.println("  Body:          "
                        + message.getBody());
                for (final Entry<String, String> entry : message.getAttributes()
                        .entrySet()) {
                    System.out.println("Attribute");
                    System.out.println("  Name:  " + entry
                            .getKey());
                    System.out.println("  Value: " + entry
                            .getValue());
                }
            }

            System.out.println();

//            // Delete the messages.
//            /*
//                Queue A
//             */
//            System.out.println("Deleting a message.\n");
//            final String queueAMessageReceiptHandle = queueAMessages.get(0).getReceiptHandle();
//            sqs.deleteMessage(new DeleteMessageRequest(queueAUrl,
//                    queueAMessageReceiptHandle));
//
//            /*
//                Queue B
//             */
//            System.out.println("Deleting a message.\n");
//            final String queueBMessageReceiptHandle = queueBMessages.get(0).getReceiptHandle();
//            sqs.deleteMessage(new DeleteMessageRequest(queueAUrl,
//                    queueBMessageReceiptHandle));
//
//            /*
//                Queue C
//             */
//            System.out.println("Deleting a message.\n");
//            final String queueCMessageReceiptHandle = queueCMessages.get(0).getReceiptHandle();
//            sqs.deleteMessage(new DeleteMessageRequest(queueAUrl,
//                    queueCMessageReceiptHandle));

//            // Delete the queue.
//            System.out.println("Deleting the test queue.\n");
//            sqs.deleteQueue(new DeleteQueueRequest(queueAUrl));
        } catch (final AmazonServiceException ase) {
            System.out.println("Caught an AmazonServiceException, which means " +
                    "your request made it to Amazon SQS, but was " +
                    "rejected with an error response for some reason.");
            System.out.println("Error Message:    " + ase.getMessage());
            System.out.println("HTTP Status Code: " + ase.getStatusCode());
            System.out.println("AWS Error Code:   " + ase.getErrorCode());
            System.out.println("Error Type:       " + ase.getErrorType());
            System.out.println("Request ID:       " + ase.getRequestId());
        } catch (final AmazonClientException ace) {
            System.out.println("Caught an AmazonClientException, which means " +
                    "the client encountered a serious internal problem while " +
                    "trying to communicate with Amazon SQS, such as not " +
                    "being able to access the network.");
            System.out.println("Error Message: " + ace.getMessage());
        }
    }
}
